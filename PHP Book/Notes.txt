--PHP NOTES--

SQL — Structured Query Language is a special language used to update, insert, or delete data from a DBMS (Database Management System). 
      A DBMS is an application that interacts with a programming language and a database to update, insert, or delete data. The DBMS uses SQL 
      to interpret the required changes to the data within the database.

--Static vs. dynamic web pages--
    A static web page does not change in relation to user requests or input. The page is created by a web developer and resides on the web server. 
    When the user requests the page via a browser, a copy of the page is sent to the browser for display.

    A dynamic page does not exist within a web server. The page is created using input from the user. A program residing on the web server will 
    create and format the page. The page that is created by the program is then downloaded to the user’s browser. A copy of the page is not (usually) 
    maintained on the web server.

HTTP — Hypertext Transfer Protocol is the protocol (standard) for transferring messages (text and web pages) between nodes (computers and servers) on 
       the Internet. It is a request-response protocol. For example, a user “requests” a web page through a browser. The web server “responds” to the 
       request and returns the page to the browser. The browser changes the request into an HTTP Get Request (such as GET/pages/mypage.html HTTP/3) that 
       is sent to the web server. The web server responds with the information requested and a status code (such as HTTP/3 200 OK).

JAX provides the ability to dynamically change portions of a web page without reloading the complete page.

JavaScript — A scripting language that provides the ability for a web page to be interactive. With JavaScript, a web page can react to the user entering 
             information into a text box and/or clicking a button. If you need to brush up on JavaScript or need additional examples, review the many free 
             JavaScript AJAX videos available on YouTube.

CSS — Cascading Style Sheets (CSS) work with HTML to display graphics on a web page. CSS describes the layout of the page, colors, text fonts, background images, 
      and other characteristics of the web page.

A conditional statement usually compares two values to determine if they are the same or different or calls a method which returns a true or false value. 

The idea of modular (or component) programming is based on the methodology of blocks of code that can be created individually to be assembled with other 
modules to produce a working application.

The interface tier (IT) displays information and provides the user the ability to interact with the application.
               Interface Tier
           ------------------------
           GUI
           information formatting
           information display
           information input from user
           information verification
           information output to BR
           Web Page, App Form

The business rules tier processes all information and data received from the interface tier and the data tier.
             Business Rules Tier
          -------------------------  
            Data received from IT
            Data received from DT 
            Data verification
            Data formatting
            Information output to IT
            information output to DT
            process data into information
            Service or Web Service

The data tier’s main function is to store information on a secondary device or to return data to the business rules tier.
                 Data Tier
          -------------------------
            Information received from BR
            Data received from DBMS
            Data formatting
            Data output to BR
            Information verification
            Information output to DBMS

Objects — Objects are blocks of code that have already been compiled for use within an application. Objects contain methods and properties. Methods (or functions) are 
          blocks of code that accomplish a task (such as placing items in a list box). Properties (or variables) are characteristics of an object that can be changed
          66 (such as a background color). Objects are usually well tested and error free. By reusing existing objects, the programmer can quickly create more reliable 
          programs.

Verification/verification code — 
          Verification code validates information. The code compares the information received to an expected standard format. For example, the code can verify that an 
          email address has both a @ and a . (period). If the information has both symbols, it could be considered “valid” (although we still are not sure that the email 
          address actually exists). If it does not have both symbols, the code is not valid. Information that is not valid usually will cause the program to display an error 
          message to the user requesting valid information be reentered.

The interface usually provides code with the ability to react to user interactions (clicking the Submit button), commonly called user events.

Event — Event-driven languages(such as PHP) can execute blocks of code when an event occurs. Events can be something that the user has done (such as clicking a button). 
        Events can also be fired by the operating system. Programs provide listener code that “hears” an event. When an event occurs, the code provides an event method, 
        which then executes.

Database Management System (DBMS) — A Database Management System is software that allows a user or an application to create and define a database. It also provides the ability 
         to insert, update, or delete information in the database.
                  Do                                       Don’t
                  format data for display                  access data from database
                  Verify correct information from user     Calculate results
                  respond to user events                   process information
                  handle the unexpected (exceptions)       Verify user Ids and passwords
                  format data for business rules tier

Server/application server/web server — 
          A server is connected to a network to provide services to any node (machine) on the network (or the Internet). A server can provide more than one service (communication, 
          security, and/or storage) or can provide a specific service. Application servers house applications that are accessible to users on the network (or the Internet). Web servers
          host web pages and web applications. They are usually exposed to access outside a corporation.

Service — Services are applications that reside in the memory of a computer or server that responds to requests from other applications. Services can be automatically loaded into memory 
          when the computer or server is booted, or they can manually be started and stopped when required. Services do not have GUI interfaces. The business rules tier can reside as a service(s) 
          on a computer or server.

Dataset — A data set is a structure that can hold multiple data tables. A data table is similar to a table in a database (with rows, columns, and data) or a spreadsheet. Datasets are commonly used 
          to pass information between tiers and between methods.
                  Do                       Don’t 
                  manipulate data          display information
                  format data              save data on secondary device
                  store data in memory     display error messages
                  raise exceptions
                  Verify data

JSON — JavaScript Object Notation is a format, similar to XML, to store and exchange data. JSON can be viewed within an editor or browser. It is most commonly used to pass data between tiers.

XML — Extensible Markup Language is a markup language, similar to HTML, to store and describe data. XML can also be used to transmit data between tiers.

SOAP — Simple Object Access Protocol is used to exchange data with a web service. It works with HTTP (Hypertext Transfer Protocol) and SMTP (Simple Mail Transfer Protocol) to provide communication 
       between an application and a web service.

Web service — An application, without an interface, that can be called to process information. A web service can provide the functionality of the business tier and/or data tier remotely on a web server. 
              TheWeb Services Description Language (WSDL)is used to describe calls to the web service and the format of information accept and returned by the web service. WSDL is similar to XML.

Microsoft Azure — Microsoft Azure is a cloud platform that provides data services, app services, and network services. Visual Studio Applications can be uploaded and secured in the Microsoft Azure cloud.
                  Do                                Don’t
                  save data on secondary device     manipulate data
                  Update data on secondary device   display error messages
                  raise exceptions                  display information
                  Verify data

The key to application development success is to properly plan the layout of your system before beginning the coding and development. By doing so, you reduce the amount of errors and problems that can occur.

the PDLC is defined with five steps: 
                  Planning and Information Gathering 
                  Analysis 
                  Design 
                  Implementation  
                  Evaluation

MVC (Model-View-Controller) is a design pattern used by software engineers (including PHP application designers) to communicate between the view and model using a controller.

The controller is software that transfers any user input to the model.

A data type describes the data that you plan on storing, such as strings (text), integers (whole numbers), or floating-point numbers (decimals). This information is used by the operating system to determine the 
      amount of space required to store the information.

Variables must always include the $ as the first character and other alphanumeric characters to complete the name. You can also include the underscore (_). However, no other special symbols or spaces are allowed.

The switch statement can be used to eliminate embedded if-then-else statements when determining a value within a variable.
            switch (value to compare) 
            {
                  case value:
                        // code to execute if true 
                  break;
                  case value;
                        // code to execute if true
                  break;
                  default:
                        // code to execute if there are no matches
                  break;
            }

                  Example
            ---------------------

            <?php
                  $a = 36;
                  switch ($a) 
                  {
                        case 10:
                              print "10";
                        break;
                        case 20:
                              print "20";
                        break;
                        case 30:
                              print "30";
                        break;
                        default:
                              print "Number was not found";
                        break;
                  }
            ?>
            
                  Result: Number was not found.
                  Why: The value 36 is not caught in any of the case statements. PHP will do conversion, when possible. In this example, it will compare the value in the strings to the number presented. 
                        The flow of the structure will drop into the default statement since there are no matches. The default statement acts in a similar fashion to the else statement; it catches all remaining possibilities. 
                        It is a good idea to include a default statement in all case structures to handle the unexpected values rather than possibility causing an exceptional situation.






        EXAMPLES:
---------------------------
         #1 <?php
                  $a = 25; $b = 36;
                  if( $a == $b) 
                  {
                        print "$b equals $a";
                  }
                  else 
                  {
                        print "$b and $a are not equal";
                  }
            ?>

                  Output: 36 and 25 are not equal.
                  Why: The value in $a (25) and $b (36) are not the same. Thus, the code in the else section will be executed.Chapter 3  the BasiCs:    php 8 syntax



         #2 <?php
                  $a = "a";  $b = "A";
                  if( $a === $b) 
                  {
                        print "$b equals $a";
                  }
                  else 
                  {
                        print "$b and $a are not equal";
                  }
            ?>

                  Output: A and a are not equal.
                  Why: Using three equal signs (===) also compares case. In this example the comparison is false due to the case. 
                        If you remove one of the equal signs, the result will become true.


         #3 <?php
                  $a = 25; $b = 36;
                  if( $a != $b) 
                  {
                        print "$b and $a are not equal";
                  }
                  else 
                  {
                        print "$b and $a are equal";
                  }
            ?>

                  Output: 36 and 25 are not equal.
                  Why: The not operator (!) works in reverse of the results of the equals operator (see #1). The condition is reversed 
                        from a false state to a true state. The code right after the if expression is executed.


         #4 <?php
                  $a = "A"; $b = "a";
                  if( $a !== $b) 
                  {
                        print "$b and $a are not equal";
                  }
                  else 
                  {
                        print "$b and $a are equal";
                  }
            ?>
            
                  Output: a and A are not equal.
                  Why: The not case operator (!==) works in reverse of the case operator (see #2). The comparison becomes true. The code right 
                       after the if statement is executed.
                       
                       
         #5 <?php
                  $a = 25.1; $b = 36;
                  if( $a < $b) 
                  {
                        print "$a is less than $b";
                  }
                  else 
                  {
                        print "$b is greater than $a";
                  }
            ?>
            
                  Output: 25.1 is less than 36.
                  Why: Less than returns true if the value on the left is less than the value on the right. In PHP 8, we can mix floating-point 
                        (decimal) and whole number (integer) comparisons. In this example, 36 will be converted to 36.0 before they are compared.


        #6  <?php
                  $a = 36; $b = 36;
                  if( $a <= $b) 
                  {
                        print "$a is less than or equal to $b";
                  }
                  else 
                  {
                        print "$b is greater than $a";
                  }
            ?>
            
                  Output: 36 is less than or equal to 36.
                  Why: The less than or equal to comparison works similar to #5. However, if the values are equal, then it returns true.
                  
                  
        #7  <?php
                  $a = 25; $b = 36;
                  if( $a > $b) 
                  {
                        print "$a is greater than $b";
                  }
                  else 
                  {
                        print "$b is greater than $a";
                  }
            ?>
            
                  Output: 36 is greater than 25.
                  Why: The greater than comparison returns true if the left value is greater than the right value. In this example, 25 is less than 36. 
                        The else portion of the code is executed.


        #8  <?php
                  $a = 36; $b = 36;
                  if( $a >= $b) 
                  {
                        print "$a is greater than or equal to $b";
                  }
                  else 
                  {
                        print "$b is greater than $a";
                  }
            ?>
            
                  Output: 36 is greater than or equal to 36.
                  Why: The greater than or equal to comparison works similar to #7. However, if the two values are equal, it returns true.


        #9  <?php
                  $a = 36; $b = 36;
                  $result = $a <=> $b;
                  if( $result === 0) 
                  {
                        print "Both are equal";
                  } 
                  else if( $result === 1) 
                  {
                        print "$a is greater than $b";
                  } 
                  else 
                  {
                        print "$b is greater than $a";
                  }
            ?>
            
                  Output: Both are equal.
                  Why: The rocket ship operator (available in PHP7+) returns -1 if $a < b, returns 0 if $a equals $b, or returns 1 if $a > $b. 
                        The if statement shown determines the status returned by the rocket ship operator and displays the appropriate result. 
                        The use of the if/else/elseif structure is shown here to determine a range of possible values. More examples will be shown in future chapters.

--Logical operators-- 
      Allow you to ask more than one question in a conditional statement.Let us look at some examples:
            
        #1  <?php
                  $a = 25; $b = 25; $c = 25; $d = 35;
                  If ( $a == $b or $c == $d ) 
                  {
                        print "Some or all of us are equal!";
                  } 
                  else 
                  {
                        print "We are not equal";
                  }
            ?>
            
                  Output: Some or all of us are equal.
                  Why: Both sides of the or statement evaluate to true. If either or both sides of an or operator are true, then the complete expression is true.
                        Note: The symbols || can also be used instead of or.

                        
        #2  <?php
                  $a = 25; $b = 25; $c = 35; $d = 35;
                  If ( $a == $b and $c == $d ) 
                  {
                        print "All of us are equal!";
                  } 
                  else 
                  {
                        print "No one is equal";
                  }
            ?>
                  Output: All of us are equal.
                  Why: Both sides of the expression must be true for complete expression to be true when using an and operator. In this example both sides are true.
                        Note: The symbols && can also be used instead of and.


        #3  <?php
                  $a = 25; $b = 25; $c = 25; $d = 25;
                  If ( $a == $b xor $c == $d ) 
                  {
                        print "Everyone is equal!";
                  } 
                  else 
                  {
                        print "Someone is not equal";
                  }
            ?>
            
                  Output: Someone is not equal.
                  Why: With excusive or (xor), only one side of the expression can be true. In this example both sides were true, so it evaluates to false. If this were 
                        an or statement, it would have evaluated to true.
                       
                    
        #4  <?php
        
                  $a = 25; $b = 25; $c = 25; $d = 25;
                  If ( ! ($a == $b xor $c == $d ) ) 
                  {
                        print "Everyone is equal!";
                  } 
                  else 
                  {
                        print "Someone is not equal";
                  }
            ?>
            
                  Output: Everyone is equal.
                  Why: The not expression (!) reverses the result. This exclusive or (xor) returned false because both sides are true. However, the not reversed the result to true.
                        The ? operator is a short coding version of a conditional if-then-else statement.
                        
                        
        #5  <?php
                  $a = 36; $b = 36;
                  print $a == $b ? "They are equal" : "They are not equal";
            ?>

                  Output: They are equal.
                  Why: The statement placed between the ? and : is executed if the comparison is true. The statement between the : and is executed if the statement is false. 
                        Since a print command is to the left of the comparison, the result of the comparison will be printed. $a and $b are the same value; thus, the first string is displayed.


        #6  <?php
                  $a = 36; $b = 24;
                  print $a <=> $b ? "They are equal" : "$a is greater than $b" : "$b is greater than $a";
            ?>
            
                  Output: 36 is greater than 24.
                  Why: In PHP 7.5+ you can also evaluate for equal (0), greater than (-1), and less than (1) using the spaceship operator. This comparison becomes very short and efficient 
                        to determine whether the values are equal, or who is greater. Since $a is greater than $b, the statement between the two colons (:) is displayed. If $a were less than 
                        $b, the statement between the last colon and the semicolon would be displayed. Otherwise, when the values are equal, the statement between the question mark (?) and first 
                        colon would be displayed.

