- Arrays -
    $team = array('Bill', 'Mary', 'Mike', 'Chris', 'Anne'); // Array holding names
    echo $team[3]; // Displays the name Chris

- Two Dimensional Arrays -
    <?php  
        $oxo = array(array('x', ' ', 'o'),
                     array('o', 'o', 'x'),
                     array('x', 'o', ' '));

        echo $oxo[1][2]; // Will display 'x'
    ?>

- Variable-naming rules -
    When creating PHP variables, you must follow these four rules:
        •Variable names, after the dollar sign, must start with a letter of the alphabet or the _ (underscore) character.
        •Variable names can contain only the characters a-z, A-Z, 0-9, and _ (underscore).
        •Variable names may not contain spaces. If a variable name must comprise more than one word, a good idea is to separate the words with the _(underscore) character (e.g., $user_name).
        •Variable names are case-sensitive. The variable $High_Score is not the same as the variable $high_score.

Operators let you specify mathematical operations to perform, such as addition, sub‐traction, multiplication, and division.

- Arithmetic operators -
        Operator    Description                Example
        +            Addition                    $j+1
        -           Subtraction                  $j-6
        *          Multiplication                $j*11
        /            Division                    $j/4
        %     Modulus (the remainder after a     $j%9
                    division is performed)     
        ++           Increment                   ++$j
        --           Decrement                   --$j
        **         Exponentiation (or power)     $j**2

- Assignment operators -
        Operator        Example        Equivalent to
        =               $j = 15          $j = 15
        +=              $j += 5          $j = $j + 5
        -=              $j -= 3          $j = $j - 3
        *=              $j *= 8          $j = $j * 8
        /=              $j /= 16         $j = $j / 16
        .=              $j .= $k         $j = $j . $k
        %=              $j %= 4          $j = $j % 4

- Comparison operators -
        Operator  Description                   Example
        ==        Is equal to                   $j == 4
        !=        Is not equal to               $j != 21
        >         Is greater than               $j > 3
        <         Is less than                  $j < 100
        >=        Is greater than or equal to   $j >= 15
        <=        Is less than or equal to      $j <= 8
        <>        Is not equal to to            $j <> 23
        ===       Is identical to to            $j === "987"
        !==       Is not identical to to        $j !== "1.2e3"

- Logical operators -
        Operator   Description               Example
        &&         And                       $j == 3 && $k == 2
        and        Low-precedence and        $j == 3 and $k == 2
        ||         Or                        $j < 5 || $j > 10
        or         Low-precedence or         $j < 5 or $j > 10
        !          Not                       ! ($j == $k)
        xor        Exclusive or              $j xor $k

- Escaping characters -
    $text = 'My spelling's atroshus'; // Erroneous syntax
    $text = 'My spelling\'s still atroshus'; // Correct syntax

An  expression  is  a  combination  of  values,  variables,  operators,  and  functions  that results in a value.
    y = 3 (|2x| + 4)
        IN PHP:
            $y = 3 * (abs(2 * $x) + 4); // abs() gets the absolute value of the parameters

A  literal  simply  means  something  that  evaluates  to  itself,  such  as  the number  73  or  the  string  "Hello".

 - Operators -
        Operator                 Description                    Example
        Arithmetic               Basic mathematics              $a + $b
        Array                    Array union                    $a + $b
        Assignment               Assign values                  $a = $b + 23
        Bitwise                  Manipulate bits within bytes   12 ^ 9
        Comparison               Compare two values             $a < $b
        Execution                Execute contents of backticks  `ls -al`
        Increment/decrement      Add or subtract 1              $a++
        Logical                  Boolean                        $a and $b
        String                   Concatenation                  $a . $b

Each operator takes a different number of operands:
    •Unary  operators,  such  as  incrementing  ($a++)  or  negation  (!$a),  take  a  single operand.
    •Binary operators, which represent the bulk of PHP operators (including addition,subtraction, multiplication, and division), 
        take two operands.
    •The  one  ternary  operator,  which  takes  the  form  expr ? x : y,  requires  three operands. It’s a terse, single-line 
        if statement that returns x if m expr is TRUE andy if expr is FALSE.

- Operation Precedence -
        Operator(s)                             Type
        ()                                      Parentheses
        ++ --                                   Increment/decrement
        !                                       Logical
        * / %                                   Arithmetic
        + - .                                   Arithmetic and string
        << >>                                   Bitwise
        < <= > >= <>                            Comparison
        == != === !==                           Comparison
        &                                       Bitwise (and references)
        ^                                       Bitwise
        |                                       Bitwise
        &&                                      Logical
        ||                                      Logical
        ? :                                     Ternary
        = += -= *= /= .= %= &= != ^= <<= >>=    Assignment
        and                                     Logical
        xor                                     Logical
        or                                      Logical

- Associativity -
        Associativity becomes  important  in  cases  in  which  you  do not explicitly force precedence, so you need to be aware 
        of the default actions of operators.
                Operator                    Description                      Associativity
                < <= >= == != === !== <>    Comparison                       None
                !                           Logical NOT                      Right
                ~                           Bitwise NOT                      Right
                ++ --                       Increment and decrement          Right
                (int)                       Cast to an integer               Right
                (double) (float) (real)     Cast to a floating-point number  Right
                (string)                    Cast to a string                 Right
                (array)                     Cast to an array                 Right
                (object)                    Cast to an object                Right
                @                           Inhibit error reporting          Right
                = += -= *= /=               Assignment                       Right
                .= %= &= |= ^= <<= >>=      Assignment                       Right
                +                           Addition and unary plus          Left
                -                           Subtraction and negation         Left
                *                           Multiplication                   Left
                /                           Division                         Left
                %                           Modulus                          Left
                .                           String concatenation             Left
                << >> & ^ |                 Bitwise                          Left
                ?:                          Ternary                          Left
                || && and or xor            Logical                          Left
                ,                           Separator                        Left

- Logical Operators -
    Logical  operators  produce  true  or  false  results,  and  therefore  are  also  known  as Boolean operators.
        Logical operator       Description
        AND                    TRUE if both operands are TRUE
        OR                     TRUE if either operand is TRUE
        XOR                    TRUE if one of the two operands is TRUE
        ! (NOT)                TRUE if the operand is FALSE, or FALSE if the operand is TRUE

    Cast type                      Description
    (int) (integer)                Cast to an integer by dropping the decimal portion.
    (bool) (boolean)               Cast to a Boolean.
    (float) (double) (real)        Cast to a floating-point number.
    (string)                       Cast to a string.
    (array)                        Cast to an array.
    (object)                       Cast to an object.

An  object  incorporates  one  or  more  functions, and the data they use, into a single structure called a class.
        function function_name([parameter [, ...]])
        {  
            // Statements
        }





